@startuml
interface Observable {
    +subscribe(event: SliderEvent, callback: (data?: any) => void): Observable
    +notify(event: SliderEvent, data?: any): void
}
class Observer implements Observable {
    -events: Map<SliderEvent, ((data?: any) => void)[]>
    +subscribe(event: SliderEvent, callback: (data?: any) => void): Observer
    +notify(event: SliderEvent, data?: any): void
}
class SliderError extends Error {
    +name: string
}
class Model {
    #current: MinMax<number>
    +border: MinMax<number>
    +step: number
    +isRange: boolean
    +isVertical: boolean
    +withTooltip: boolean
    +withScale: boolean
    #copyBool(__0: SliderOptions): void
    +setCurrent(current: MinMax<number>): void
    +getCurrent(): MinMax<number>
    +getRealCurrent(): MinMax<number>
    +getPoint(position: MinMaxPosition): PointData
    +getCurrentPoints(): MinMax<PointData>
    +getOptions(): SliderOptions
    +getBoolOptions(): ViewBoolOptions
    +getRangeSize(): number
    +selectPosition(value: number): MinMaxPosition
    +normalizeCurrentOrder(): void
    +normalizeByStep(value: number): number
    +calcValue(ratio: number): number
    +isOrderNormalizeRequired(): boolean
    +isSameCurrent(value: number): boolean
    +willCurrentCollapse(position: MinMaxPosition, value: number): boolean
    +areCurrentEqual(): boolean
    +toggleRange(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    +toggleScale(): void
}
interface ViewElement {
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean, args: any[]): HTMLElement
}
class CssClassUtil {
    +{static} MAIN_PREFIX: "slider"
    +{static} initClass(element: HTMLElement, isVertical: boolean, name?: ClassNames): void
    +{static} toggleOrientation(element: HTMLElement, name?: ClassNames): void
    +{static} toggleHidden(element: HTMLElement, name?: ClassNames): void
    +{static} addGrabbing(): void
    +{static} removeGrabbing(): void
    -{static} getFullName(name?: ClassNames): string
}
class PositionUtil {
    +{static} calc(isVertical: boolean, element: HTMLElement, event: MouseEvent): number
    -{static} calcForOwner(isVertical: boolean, element: HTMLElement, event: MouseEvent): number
}
class Scale extends Observer implements ViewElement {
    -element: HTMLElement
    +buildHtml(isVertical: boolean): HTMLElement
    +getElement(): HTMLElement
    +toggleHidden(): void
    +toggleOrientation(): void
    +updateLines(step: number, size: number, isVertical: boolean): void
    -handleScaleMouseDown: (event: MouseEvent) => void
    -{static} buildLineHtml(isVertical: boolean, index: number, gap: number): HTMLDivElement
    -{static} calcGapAndCount(childCount: number, elementSize: number, modelStep: number, modelSize: number): { percentGap: number; visibleCount: number; }
}
class Tooltip implements ViewElement {
    -element: HTMLElement
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean): HTMLElement
    +toggleHidden(): void
    +update(text: any, isVertical: boolean): void
    +toggleOrientation(): void
}
class Point extends Observer implements ViewElement {
    -element: HTMLDivElement
    -moveDiff: RelativePoint
    -tooltip: Tooltip
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean): HTMLDivElement
    +startGrabbing(): void
    +updatePosition(isVertical: boolean, point: PointData): void
    +toggleHidden(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    -handlePointMouseDown: (event: MouseEvent) => void
    -updateMoveDiff(clientX: number, clientY: number): void
    -handleMouseUp: () => void
    -handleMouseMove: (event: MouseEvent) => void
    -calcAbsolute(isVertical: boolean, event: MouseEvent): number
}
class Range implements ViewElement {
    -element: HTMLDivElement
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean): HTMLElement
    +updatePosition(isVertical: boolean, percent: MinMax<number>, height?: number): void
    +toggleOrientation(): void
}
class Body extends Observer implements ViewElement {
    -element: HTMLElement
    -range: Range
    -points: MinMax<Point>
    -isMoveStarted: boolean
    +buildHtml(isVertical: boolean): HTMLElement
    +getElement(): HTMLElement
    +toggleRange(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    +updatePosition(isVertical: boolean, __1: MinMax<PointData>): void
    +startPointMove(): void
    -handleStopPointMove: () => void
    -handleMinPointMove: (calcAbsolute: CalcAbsolute) => void
    -handleMaxPointMove: (calcAbsolute: CalcAbsolute) => void
    -handleSliderBodyMouseDown: (event: MouseEvent) => void
    -isRangeOrBodyElement(event: Event): boolean
    -handlePointMove: (calcAbsolute: CalcAbsolute, position?: MinMaxPosition) => void
    -calcValue(isVertical: boolean, coordinate: number): number
}
class View extends Observer implements View {
    +element: HTMLElement
    +body: Body
    +scale: Scale
    +render(element: HTMLElement, __1: ViewBoolOptions, points: MinMax<PointData>, step: number, size: number): void
    +toggleRange(): void
    +toggleTooltip(): void
    +toggleScale(): void
    +toggleOrientation(): void
    +updateScaleLines(step: number, size: number, isVertical: boolean): void
    +updatePosition(isVertical: boolean, points: MinMax<PointData>): void
    -handlePointMove: (calcPoint: CalcPoint) => void
    -handleScaleClick: (calcRatio: CalcRatio) => void
    -handleBodyClick: (calcRatio: CalcRatio) => void
}
class Presenter extends Observer {
    #model: Model
    #view: View
    +init(parent: HTMLElement): void
    #updatePosition(modelValue: number, position: MinMaxPosition): void
    -updateModelAndViewCurrent(modelValue: number, position: MinMaxPosition): void
    -handleSliderClick: (calcRatio: CalcRatio) => void
    -handlePointMove: (calcPoint: CalcPoint) => void
    -handlePointMoveByScale: (calcPositionWithDiff: CalcPositionWithDiff) => void
}
class ValidModel extends Model {
    +setValidCurrent(current: number, position: MinMaxPosition): void
    +setValidCurrents(currentMin: number, currentMax: number): void
    +setValidStep(step: number): void
    +setValidBorder(value: number, position: MinMaxPosition): void
    +setValidBorders(borderMin: number, borderMax: number): void
    -isInBorderRange(current: number): void
    -isRangeActive(): void
    -isValidStep(step: number): void
    -isDivideToStepOrBorder(current: number): void
    -isNotValidByStepOrBorder(current: number): boolean
    -isValidBorder(value: number, position: MinMaxPosition): void
    -{static} isPositiveRange(min: number, max: number): void
    -{static} isValidBorders(borderMin: number, borderMax: number): void
}
class PresenterProxy extends Presenter {
    #model: ValidModel
    +getOptions(): SliderOptions
    +addSlideListener(callback: (data: { value: number; position: MinMaxPosition; }) => void): void
    +setCurrentRange(valueMin: number, valueMax: number): void
    +setCurrentRangeMin(value: number): void
    +setCurrentRangeMax(value: number): void
    +setCurrent(value: number): void
    +setStep(step: number): void
    +setBorderMin(value: number): void
    +setBorderMax(value: number): void
    +setBorders(borderMin: number, borderMax: number): void
    +toggleRange(): void
    +toggleScale(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    -updatePointByStep(position: MinMaxPosition): void
    -normalizePoints(border: number, checkIsOverflow: (current: number) => boolean): void
    -updateScaleLines(): void
}
class SliderPlugin extends PresenterProxy implements Slider
interface SliderCommon {
    +toggleRange(): void
    +toggleScale(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    +addSlideListener(callback: (data: { value: number; position: MinMaxPosition; }) => void): void
    +setCurrentRangeMin(value: number): void
    +setCurrentRangeMax(value: number): void
    +setCurrent(value: number): void
    +setCurrentRange(valueMin: number, valueMax: number): void
    +setStep(step: number): void
    +setBorderMin(value: number): void
    +setBorderMax(value: number): void
    +setBorders(borderMin: number, borderMax: number): void
}
interface Slider extends SliderCommon {
    +getOptions(): SliderOptions
}
interface SliderGroup extends SliderCommon {
    +getSlider(index: number): SliderPlugin
    +getElementsQuery(): JQuery<HTMLElement>
    +getOptions(): SliderOptions[]
    +size(): number
}

View..>CssClassUtil
Body..>CssClassUtil
Range..>CssClassUtil
Scale..>CssClassUtil
Tooltip..>CssClassUtil

Scale..>PositionUtil
Body..>PositionUtil

PresenterProxy..>SliderError
ValidModel..>SliderError

Presenter o-- Model
Presenter o-- View
PresenterProxy o-- ValidModel

SliderPlugin ..> ValidModel
SliderPlugin ..> View
View o-- Body
View o-- Scale
Body o-- Point
Body o-- Range
Point o-- Tooltip
@enduml
