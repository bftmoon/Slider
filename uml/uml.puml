@startuml
interface IMinMax<T> {
    +min?: T
    +max?: T
}
interface IOptions {
    +border?: IMinMax<number>
    +current?: IMinMax<number>
    +step?: number
    +isVertical?: boolean
    +isRange?: boolean
    +withTooltip?: boolean
    +withScale?: boolean
}
interface IViewElement {
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean, args: any[]): HTMLElement
}
enum SliderEvent {
    sliderClick
    pointMove
    pointGrab
    valueChanged
}
interface IObserver {
    +subscribe(event: SliderEvent, callback: (data?: any) => void): IObserver
    +notify(event: SliderEvent, data?: any): void
}
class Observer implements IObserver {
    -events: Map<SliderEvent, ((data?: any) => void)[]>
    +subscribe(event: SliderEvent, callback: (data?: any) => void): Observer
    +notify(event: SliderEvent, data?: any): void
}
enum ClassNames {
    point
    scale
    tooltip
    range
    body
    line
}
class CssClassUtil {
    +{static} MAIN_PREFIX: "slider"
    +{static} initClass(element: HTMLElement, isVertical: boolean, name?: ClassNames): void
    +{static} toggleOrientation(element: HTMLElement, name?: ClassNames): void
    +{static} toggleHidden(element: HTMLElement, name?: ClassNames): void
    +{static} toggleGrab(element: HTMLElement, name?: ClassNames): void
    -{static} getFullName(name?: ClassNames): string
}
class ConvertUtil {
    +{static} toPercent(value: number, size: number): number
    +{static} fromPercent(percent: number, size: number): number
    +{static} toPercentWithDiff(value: number, begin: number, end: number): number
    +{static} fromPercentWithDiff(value: number, begin: number, end: number): number
}
enum MinMaxPosition {
    min
    max
}
interface IRelativePointPercents {
    +x: number
    +y: number
}
interface IAbsolutePoint {
    +x: number
    +y: number
}
interface IPointMoveData extends IRelativePointPercents {
    +position: MinMaxPosition
}
class PositionUtil {
    +{static} calcEventPoint(element: HTMLElement, event: MouseEvent): IRelativePointPercents
    +{static} calcPointByParent(parent: HTMLElement, __1: IAbsolutePoint): IRelativePointPercents
}
class Scale extends Observer implements IViewElement {
    -element: HTMLElement
    +buildHtml(isVertical: boolean): HTMLElement
    +getElement(): HTMLElement
    +toggleHidden(): void
    +toggleOrientation(): void
    +updateLines(step: number, size: number, isVertical: boolean): void
    -handleScaleClick: (event: MouseEvent) => void
    -{static} buildLineHtml(isVertical: boolean, index: number, gap: number): HTMLDivElement
    -{static} calcGapAndCount(childCount: number, elementSize: number, modelStep: number, modelSize: number): { percentGap: number; visibleCount: number; }
}
class Tooltip implements IViewElement {
    -element: HTMLElement
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean): HTMLElement
    +toggleHidden(): void
    +update(text: any, isVertical: boolean): void
    +toggleOrientation(): void
}
interface IPoint {
    +percent: number
    +tooltip?: any
}
class Point extends Observer implements IViewElement {
    -element: HTMLDivElement
    -tooltip: Tooltip
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean): HTMLDivElement
    -handlePointMouseDown: () => void
    -handleMouseUp: () => void
    -handleMouseMove: (event: MouseEvent) => void
    +updatePosition(isVertical: boolean, point: IPoint): void
    +toggleHidden(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
}
class Range implements IViewElement {
    -element: HTMLDivElement
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean): HTMLElement
    +updatePosition(isVertical: boolean, percent: IMinMax<number>, height?: number): void
    +toggleOrientation(): void
}
class Body extends Observer implements IViewElement {
    -element: HTMLElement
    -range: Range
    -points: IMinMax<Point>
    +getElement(): HTMLElement
    +buildHtml(isVertical: boolean): HTMLElement
    +toggleRange(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    +updatePosition(isVertical: boolean, __1: IMinMax<IPoint>): void
    -handleMinPointMove: (data: IAbsolutePoint) => void
    -handleMaxPointMove: (data: IAbsolutePoint) => void
    -handleSliderBodyClick: (event: MouseEvent) => void
    -handlePointMove: (data: IAbsolutePoint, position?: MinMaxPosition) => void
}
interface IViewOptions {
    +isVertical: boolean
    +isRange: boolean
    +withTooltip: boolean
    +withScale: boolean
}
interface IView extends IObserver {
    +render(element: HTMLElement, options: IViewOptions, points: IMinMax<IPoint>, step: number, size: number): void
    +toggleRange(): void
    +toggleTooltip(): void
    +toggleScale(): void
    +toggleOrientation(): void
    +updateScaleLines(step: number, size: number, isVertical: boolean): void
    +updatePosition(isVertical: boolean, points: IMinMax<IPoint>): void
}
class DefaultView extends Observer implements IView {
    +element: HTMLElement
    +body: Body
    +scale: Scale
    +render(element: HTMLElement, __1: IViewOptions, points: IMinMax<IPoint>, step: number, size: number): void
    +toggleRange(): void
    +toggleTooltip(): void
    +toggleScale(): void
    +toggleOrientation(): void
    +updateScaleLines(step: number, size: number, isVertical: boolean): void
    +updatePosition(isVertical: boolean, points: IMinMax<IPoint>): void
    -handlePointMove: (data: IPointMoveData) => void
    -handleScaleClick: (data: IRelativePointPercents) => void
    -handleBodyClick: (data: IRelativePointPercents) => void
}
class DefaultModel {
    #current: IMinMax<number>
    +border: IMinMax<number>
    +step: number
    +isRange: boolean
    +isVertical: boolean
    +withTooltip: boolean
    +withScale: boolean
    #copyBool(__0: IOptions): void
    +setCurrent(current: IMinMax<number>): void
    +getCurrent(): IMinMax<number>
    +getRealCurrent(): IMinMax<number>
    +getPoint(position: MinMaxPosition): IPoint
    +getCurrentPoints(): IMinMax<IPoint>
    +getOptions(): IOptions
    +getBoolOptions(): IViewOptions
    +getRangeSize(): number
    +selectPosition(value: number): MinMaxPosition
    +normalizeCurrentOrder(): void
    +normalizeByStep(value: number): number
    +calcModelValue(percent: number): number
    +isOrderNormalizeRequired(): boolean
    +isSameCurrent(value: number): boolean
    +willCurrentCollapse(position: MinMaxPosition, value: number): boolean
    +toggleRange(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    +toggleScale(): void
    -{static} copyMinMax(thisOption: IMinMax<any>, __1: IMinMax<any>): void
}
class SliderError extends Error {
    +name: string
}
class Presenter extends Observer {
    #model: DefaultModel
    #view: IView
    +init(parent: HTMLElement): void
    #updatePosition(modelValue: number, position: MinMaxPosition): void
    -handleSliderClick: ({ x, y }: IRelativePointPercents) => void
    -handlePointMove: ({ x, y, position }: IPointMoveData) => void
}
class DefaultValidModel extends DefaultModel {
    +setValidCurrent(current: any, position: MinMaxPosition): void
    +setValidCurrents(currentMin: any, currentMax: any): void
    +setValidStep(step: any): void
    +setValidBorder(value: any, position: MinMaxPosition): void
    +setValidBorders(borderMin: any, borderMax: any): void
    -isInBorderRange(current: number): void
    -isRangeActive(): void
    -isValidStep(step: number): void
    -isDivideToStepOrBorder(current: number): void
    -isValidBorder(value: number, position: MinMaxPosition): void
    -{static} isValidType(value: any): void
    -{static} isPositiveRange(min: number, max: number): void
    -{static} isValidBorders(borderMin: number, borderMax: number): void
}
class PresenterProxy extends Presenter {
    #model: DefaultValidModel
    +getOptions(): IOptions
    +addSlideListener(callback: (data: { value: number; position: MinMaxPosition; }) => void): void
    +setCurrentRange(valueMin: any, valueMax: any): void
    +setCurrentRangeMin(value: any): void
    +setCurrentRangeMax(value: any): void
    +setCurrent(value: any): void
    +setStep(step: any): void
    +setBorderMin(value: any): void
    +setBorderMax(value: any): void
    +setBorders(borderMin: any, borderMax: any): void
    +toggleRange(): void
    +toggleScale(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    -updatePointByStep(position: MinMaxPosition): void
    -normalizePoints(border: number, checkIsOverflow: (current: number) => boolean): void
    -updateScaleLines(): void
}
class Slider extends PresenterProxy implements ISlider
interface ISliderCommon {
    +toggleRange(): void
    +toggleScale(): void
    +toggleTooltip(): void
    +toggleOrientation(): void
    +addSlideListener(callback: (data: { value: number; position: MinMaxPosition; }) => void): void
    +setCurrentRangeMin(value: any): void
    +setCurrentRangeMax(value: any): void
    +setCurrent(value: any): void
    +setCurrentRange(valueMin: any, valueMax: any): void
    +setStep(step: any): void
    +setBorderMin(value: any): void
    +setBorderMax(value: any): void
    +setBorders(borderMin: any, borderMax: any): void
}
interface ISlider extends ISliderCommon {
    +getOptions(): IOptions
}
interface ISliderGroup extends ISliderCommon {
    +getSlider(index: number): Slider
    +getElementsQuery(): JQuery<HTMLElement>
    +getOptions(): IOptions[]
    +size(): number
}

Slider o-- DefaultValidModel
Slider o-- DefaultView
DefaultView o-- Body
DefaultView o-- Scale
Body o-- Point
Body o-- IMinMax
Body o-- Range
Point o-- Tooltip

IObserver ..> SliderEvent
Observer ..> SliderEvent

Range ..> IMinMax
Point ..> IPoint
Body ..> MinMaxPosition
Body ..> IAbsolutePoint

ISliderCommon ..>MinMaxPosition

Presenter ..> MinMaxPosition
Presenter ..> IPointMoveData
Presenter ..> IRelativePointPercents
PresenterProxy ..> MinMaxPosition
PresenterProxy..>SliderError

DefaultModel..>IMinMax
DefaultModel..>IOptions
DefaultModel..>IViewOptions
DefaultModel..>MinMaxPosition
DefaultValidModel..>MinMaxPosition
DefaultValidModel..>SliderError

PositionUtil..>IAbsolutePoint
PositionUtil..>IRelativePointPercents

PositionUtil..>ConvertUtil
Scale..>ConvertUtil
DefaultModel..>ConvertUtil

DefaultView..>CssClassUtil
Body..>CssClassUtil
Range..>CssClassUtil
Scale..>CssClassUtil
Tooltip..>CssClassUtil

CssClassUtil..>ClassNames
DefaultView..>ClassNames
Body..>ClassNames
Range..>ClassNames
Scale..>ClassNames
Tooltip..>ClassNames

Scale..>PositionUtil
Body..>PositionUtil
@enduml
