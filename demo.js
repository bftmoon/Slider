!function(t){function e(e){for(var i,s,l=e[0],a=e[1],u=e[2],p=0,h=[];p<l.length;p++)s=l[p],Object.prototype.hasOwnProperty.call(o,s)&&o[s]&&h.push(o[s][0]),o[s]=0;for(i in a)Object.prototype.hasOwnProperty.call(a,i)&&(t[i]=a[i]);for(c&&c(e);h.length;)h.shift()();return r.push.apply(r,u||[]),n()}function n(){for(var t,e=0;e<r.length;e++){for(var n=r[e],i=!0,l=1;l<n.length;l++){var a=n[l];0!==o[a]&&(i=!1)}i&&(r.splice(e--,1),t=s(s.s=n[0]))}return t}var i={},o={1:0,2:0,3:0,4:0},r=[];function s(e){if(i[e])return i[e].exports;var n=i[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=i,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(n,i,function(e){return t[e]}.bind(null,i));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="";var l=window.webpackJsonp=window.webpackJsonp||[],a=l.push.bind(l);l.push=e,l=l.slice();for(var u=0;u<l.length;u++)e(l[u]);var c=a;r.push(["ll6+",0]),n()}({"3fd2":function(t,e,n){},"97wa":function(t,e,n){},Cauo:function(t,e,n){"use strict";n.r(e);var i,o=function(){function t(){this.events=new Map}return t.prototype.subscribe=function(t,e){return this.events.has(t)||this.events.set(t,[]),this.events.get(t).push(e),this},t.prototype.notify=function(t,e){this.events.has(t)&&this.events.get(t).forEach((function(t){t(e)}))},t}();!function(t){t[t.sliderClick=0]="sliderClick",t[t.pointMove=1]="pointMove",t[t.pointGrab=2]="pointGrab",t[t.valueChanged=3]="valueChanged"}(i||(i={}));var r,s=i;!function(t){t[t.point=0]="point",t[t.scale=1]="scale",t[t.tooltip=2]="tooltip",t[t.range=3]="range",t[t.body=4]="body",t[t.line=5]="line"}(r||(r={}));var l,a,u=r,c=function(){function t(){}return t.initClass=function(e,n,i){var o=t.getFullName(i);e.classList.add(o,o+(n?"_vertical":"_horizontal"))},t.toggleOrientation=function(e,n){var i=t.getFullName(n);e.classList.toggle(i+"_vertical"),e.classList.toggle(i+"_horizontal")},t.toggleHidden=function(e,n){e.classList.toggle(t.getFullName(n)+"_hidden")},t.toggleGrab=function(e,n){e.classList.toggle(t.getFullName(n)+"_grabbed")},t.getFullName=function(e){return void 0!==e?t.MAIN_PREFIX+"__"+u[e]:t.MAIN_PREFIX},t.MAIN_PREFIX="slider",t}(),p=function(){function t(){}return t.toPercent=function(t,e){return t/e*100},t.fromPercent=function(t,e){return e*(t/100)},t.toPercentWithDiff=function(e,n,i){return t.toPercent(e-n,i-n)},t.fromPercentWithDiff=function(e,n,i){return t.fromPercent(e,i-n)+n},t}(),h=function(){function t(){}return t.calcEventPoint=function(e,n){return e===n.target?{x:p.toPercent(n.offsetX,n.target.offsetWidth),y:p.toPercent(n.offsetY,n.target.offsetHeight)}:t.calcPointByParent(e,{x:n.clientX,y:n.clientY})},t.calcPointByParent=function(t,e){var n=e.x,i=e.y,o=t.getBoundingClientRect(),r=o.left,s=o.top,l=o.width,a=o.height;return{x:p.toPercent(n-r,l),y:p.toPercent(i-s,a)}},t}(),d=(l=function(t,e){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),f=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.handleScaleClick=function(t){e.notify(s.sliderClick,h.calcEventPoint(e.element,t))},e}return d(e,t),e.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.scale),this.element.addEventListener("click",this.handleScaleClick),this.element},e.prototype.getElement=function(){return this.element},e.prototype.toggleHidden=function(){c.toggleHidden(this.element,u.scale)},e.prototype.toggleOrientation=function(){c.toggleOrientation(this.element,u.scale),this.element.childNodes.forEach((function(t){c.toggleOrientation(t,u.line)}))},e.prototype.updateLines=function(t,n,i){this.element.innerHTML="";var o=Math.floor(n/t)-Number(n%t==0);if(o>0){for(var r=e.calcGapAndCount(o,this.element[i?"offsetHeight":"offsetWidth"],t,n),s=r.percentGap,l=r.visibleCount,a=document.createDocumentFragment(),u=0;u<l;u+=1)a.append(e.buildLineHtml(i,u+1,s));this.element.append(a)}},e.buildLineHtml=function(t,e,n){var i=document.createElement("div");return i.style[t?"bottom":"left"]=n*e+"%",c.initClass(i,t,u.line),i},e.calcGapAndCount=function(t,e,n,i){for(var o=t,r=e*(n/i);r<=4;)r*=2,o/=2;return{percentGap:p.toPercent(r,e),visibleCount:Math.floor(o)}},e}(o),m=function(){function t(){}return t.prototype.getElement=function(){return this.element},t.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.tooltip),this.element},t.prototype.toggleHidden=function(){c.toggleHidden(this.element,u.tooltip)},t.prototype.update=function(t,e){if(this.element.innerText=t.toString(),!e){this.element.style.left="",this.element.style.right="";var n=this.element.getBoundingClientRect();n.left<0&&(this.element.style.left="0"),n.right>document.documentElement.offsetWidth&&(this.element.style.right="0")}},t.prototype.toggleOrientation=function(){c.toggleOrientation(this.element,u.tooltip)},t}(),g=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),y=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.tooltip=new m,e.handlePointMouseDown=function(){document.documentElement.classList.add("slider-plugin"),c.toggleGrab(e.element,u.point),e.notify(s.pointGrab,{isGrabbed:!0}),document.addEventListener("mouseup",e.handleMouseUp),document.addEventListener("mousemove",e.handleMouseMove)},e.handleMouseUp=function(){document.documentElement.classList.remove("slider-plugin"),c.toggleGrab(e.element,u.point),document.removeEventListener("mouseup",e.handleMouseUp),document.removeEventListener("mousemove",e.handleMouseMove)},e.handleMouseMove=function(t){e.notify(s.pointMove,{x:t.clientX,y:t.clientY})},e}return g(e,t),e.prototype.getElement=function(){return this.element},e.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.point),this.element.addEventListener("mousedown",this.handlePointMouseDown),this.element.append(this.tooltip.buildHtml(t)),this.element},e.prototype.updatePosition=function(t,e){var n=this.element.offsetHeight/2;this.element.style[t?"bottom":"left"]="calc("+e.percent+"% - "+n+"px)",void 0!==e.tooltip&&this.tooltip.update(e.tooltip,t)},e.prototype.toggleHidden=function(){c.toggleHidden(this.element,u.point)},e.prototype.toggleTooltip=function(){this.tooltip.toggleHidden()},e.prototype.toggleOrientation=function(){this.element.removeAttribute("style"),c.toggleOrientation(this.element,u.point),this.tooltip.toggleOrientation()},e}(o),v=function(){function t(){}return t.prototype.getElement=function(){return this.element},t.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.range),this.element},t.prototype.updatePosition=function(t,e,n){if(t){var i=n/100;void 0!==e.min&&(this.element.style.marginBottom=i*e.min+"px"),void 0!==e.max&&(this.element.style.marginTop=i*(100-e.max)+"px")}else void 0!==e.min&&(this.element.style.marginLeft=e.min+"%"),void 0!==e.max&&(this.element.style.marginRight=100-e.max+"%")},t.prototype.toggleOrientation=function(){this.element.removeAttribute("style")},t}();!function(t){t.min="min",t.max="max"}(a||(a={}));var b=a,w=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),x=function(){return(x=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},P=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.range=new v,e.points={min:new y,max:new y},e.handleMinPointMove=function(t){e.handlePointMove(t)},e.handleMaxPointMove=function(t){e.handlePointMove(t,b.max)},e.handleSliderBodyClick=function(t){e.notify(s.sliderClick,h.calcEventPoint(e.element,t))},e.handlePointMove=function(t,n){void 0===n&&(n=b.min),e.notify(s.pointMove,x(x({},h.calcPointByParent(e.element,t)),{position:n}))},e}return w(e,t),e.prototype.getElement=function(){return this.element},e.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.body),this.element.addEventListener("click",this.handleSliderBodyClick),this.element.append(this.points.min.buildHtml(t),this.points.max.buildHtml(t),this.range.buildHtml(t)),this.points.min.subscribe(s.pointMove,this.handleMinPointMove),this.points.max.subscribe(s.pointMove,this.handleMaxPointMove),this.element},e.prototype.toggleRange=function(){this.points.min.toggleHidden()},e.prototype.toggleTooltip=function(){this.points.min.toggleTooltip(),this.points.max.toggleTooltip()},e.prototype.toggleOrientation=function(){c.toggleOrientation(this.element,u.body),this.points.min.toggleOrientation(),this.points.max.toggleOrientation(),this.range.toggleOrientation()},e.prototype.updatePosition=function(t,e){var n=e.min,i=e.max,o={};void 0!==n&&(this.points.min.updatePosition(t,n),o.min=n.percent),void 0!==i&&(this.points.max.updatePosition(t,i),o.max=i.percent),this.range.updatePosition(t,o,t?this.element.offsetHeight:void 0)},e}(o),C=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),S=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.body=new P,e.scale=new f,e.handlePointMove=function(t){e.notify(s.pointMove,t)},e.handleScaleClick=function(t){e.notify(s.sliderClick,t)},e.handleBodyClick=function(t){e.notify(s.sliderClick,t)},e}return C(e,t),e.prototype.render=function(t,e,n,i,o){var r=e.isVertical,l=e.isRange,a=e.withTooltip,u=e.withScale;this.element=t;var p=document.createDocumentFragment();c.initClass(this.element,r),p.append(this.body.buildHtml(r),this.scale.buildHtml(r)),this.body.subscribe(s.sliderClick,this.handleBodyClick).subscribe(s.pointMove,this.handlePointMove),this.scale.subscribe(s.sliderClick,this.handleScaleClick),a||this.body.toggleTooltip(),t.append(p),this.updatePosition(r,n),l||this.body.toggleRange(),u?this.scale.updateLines(i,o,r):this.scale.toggleHidden()},e.prototype.toggleRange=function(){this.body.toggleRange()},e.prototype.toggleTooltip=function(){this.body.toggleTooltip()},e.prototype.toggleScale=function(){this.scale.toggleHidden()},e.prototype.toggleOrientation=function(){c.toggleOrientation(this.element),this.body.toggleOrientation(),this.scale.toggleOrientation()},e.prototype.updateScaleLines=function(t,e,n){this.scale.updateLines(t,e,n)},e.prototype.updatePosition=function(t,e){this.body.updatePosition(t,e)},e}(o),_=(n("xe9d"),n("lrbR")),O=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),M=function(t){function e(e,n){var i=t.call(this)||this;return i.handleSliderClick=function(t){var e=t.x,n=t.y,o=i.model.calcModelValue(i.model.isVertical?100-n:e);i.model.isSameCurrent(o)||i.updatePosition(o,i.model.selectPosition(o))},i.handlePointMove=function(t){var e=t.x,n=t.y,o=t.position;i.updatePosition(i.model.calcModelValue(i.model.isVertical?100-n:e),o)},i.model=e,i.view=n,i}return O(e,t),e.prototype.init=function(t){if(void 0===t)throw new _.a("Parent element undefined");this.view.render(t,this.model.getBoolOptions(),this.model.getCurrentPoints(),this.model.step,this.model.getRangeSize()),this.view.subscribe(s.sliderClick,this.handleSliderClick).subscribe(s.pointMove,this.handlePointMove)},e.prototype.updatePosition=function(t,e){var n,i;this.model.willCurrentCollapse(e,t)||(this.model.setCurrent(((n={})[e]=t,n)),this.view.updatePosition(this.model.isVertical,((i={})[e]=this.model.getPoint(e),i)),this.notify(s.valueChanged,{value:t,position:e}))},e}(o),R=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),V=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return R(e,t),e.prototype.getOptions=function(){return this.model.getOptions()},e.prototype.addSlideListener=function(t){this.subscribe(s.valueChanged,t)},e.prototype.setCurrentRange=function(t,e){this.model.setValidCurrents(t,e),this.view.updatePosition(this.model.isVertical,this.model.getCurrentPoints())},e.prototype.setCurrentRangeMin=function(t){this.model.setValidCurrent(t,b.min),this.view.updatePosition(this.model.isVertical,{min:this.model.getPoint(b.min)})},e.prototype.setCurrentRangeMax=function(t){this.model.setValidCurrent(t,b.max),this.view.updatePosition(this.model.isVertical,{max:this.model.getPoint(b.max)})},e.prototype.setCurrent=function(t){this.setCurrentRangeMax(t)},e.prototype.setStep=function(t){this.model.setValidStep(t),this.model.withScale&&this.view.updateScaleLines(this.model.step,this.model.getRangeSize(),this.model.isVertical),this.updatePointByStep(b.max),this.model.isRange&&this.updatePointByStep(b.min)},e.prototype.setBorderMin=function(t){var e=this;this.model.setValidBorder(t,b.min),this.normalizePoints(this.model.border.min,(function(t){return t<e.model.border.min})),this.updateScaleLines()},e.prototype.setBorderMax=function(t){var e=this;this.model.setValidBorder(t,b.max),this.normalizePoints(this.model.border.max,(function(t){return t>e.model.border.max})),this.updateScaleLines()},e.prototype.setBorders=function(t,e){var n=this;this.model.setValidBorders(t,e),this.normalizePoints(this.model.border.min,(function(t){return t<n.model.border.min})),this.normalizePoints(this.model.border.max,(function(t){return t>n.model.border.max}))},e.prototype.toggleRange=function(){this.model.toggleRange(),this.view.toggleRange(),this.model.isOrderNormalizeRequired()&&(this.model.normalizeCurrentOrder(),this.view.updatePosition(this.model.isVertical,{max:this.model.getPoint(b.max)}),this.notify(s.valueChanged,{value:this.model.getCurrent().max,position:b.max})),this.view.updatePosition(this.model.isVertical,{min:this.model.getPoint(b.min)})},e.prototype.toggleScale=function(){this.model.toggleScale(),this.view.toggleScale(),this.model.withScale&&this.updateScaleLines()},e.prototype.toggleTooltip=function(){this.model.toggleTooltip(),this.view.toggleTooltip()},e.prototype.toggleOrientation=function(){this.model.toggleOrientation(),this.view.toggleOrientation(),this.view.updatePosition(this.model.isVertical,this.model.getCurrentPoints()),this.model.withScale&&this.view.updateScaleLines(this.model.step,this.model.getRangeSize(),this.model.isVertical)},e.prototype.updatePointByStep=function(t){var e=this.model.getCurrent()[t],n=this.model.normalizeByStep(e);n!==e&&this.updatePosition(n,t)},e.prototype.normalizePoints=function(t,e){var n=this.model.getRealCurrent();e(n.min)&&(this.model.setCurrent({min:t}),this.notify(s.valueChanged,{value:t,position:b.min})),e(n.max)&&(this.model.setCurrent({max:t}),this.notify(s.valueChanged,{value:t,position:b.max})),this.view.updatePosition(this.model.isVertical,this.model.getCurrentPoints())},e.prototype.updateScaleLines=function(){this.model.withScale&&this.view.updateScaleLines(this.model.step,this.model.getRangeSize(),this.model.isVertical)},e}(M),E=function(){function t(e){this.current={min:0,max:80},this.border={min:0,max:100},this.step=1,this.isRange=!0,this.isVertical=!1,this.withTooltip=!0,this.withScale=!0,void 0!==e&&(void 0!==e.border&&t.copyMinMax(this.border,e.border),void 0!==e.current&&t.copyMinMax(this.current,e.current),void 0!==e.step&&(this.step=e.step),this.copyBool(e))}return t.prototype.copyBool=function(t){var e=t.isVertical,n=t.isRange,i=t.withScale,o=t.withTooltip;void 0!==n&&(this.isRange=n),void 0!==e&&(this.isVertical=e),void 0!==o&&(this.withTooltip=o),void 0!==i&&(this.withScale=i)},t.copyMinMax=function(t,e){var n=e.min,i=e.max;void 0!==i&&(t.max=i),void 0!==n&&(t.min=n)},t.prototype.setCurrent=function(e){t.copyMinMax(this.current,e)},t.prototype.getCurrent=function(){return this.isRange?this.current:{max:this.current.max,min:this.border.min}},t.prototype.getRealCurrent=function(){return this.current},t.prototype.getPoint=function(t){return{percent:p.toPercentWithDiff(this.getCurrent()[t],this.border.min,this.border.max),tooltip:this.getCurrent()[t]}},t.prototype.getCurrentPoints=function(){return{min:this.getPoint(b.min),max:this.getPoint(b.max)}},t.prototype.getOptions=function(){return{current:this.getCurrent(),border:this.border,step:this.step,isVertical:this.isVertical,isRange:this.isRange,withScale:this.withScale,withTooltip:this.withTooltip}},t.prototype.getBoolOptions=function(){return{isVertical:this.isVertical,isRange:this.isRange,withScale:this.withScale,withTooltip:this.withTooltip}},t.prototype.getRangeSize=function(){return this.border.max-this.border.min},t.prototype.selectPosition=function(t){return this.isRange?t<=this.current.min?b.min:t>=this.current.max?b.max:t<this.current.min+(this.current.max-this.current.min)/2?b.min:b.max:b.max},t.prototype.normalizeCurrentOrder=function(){var t=this.current.min;this.current.min=this.current.max,this.current.max=t},t.prototype.normalizeByStep=function(t){var e=t,n=(t-this.border.min)%this.step;return 0===n?t:(e+=this.step/2>n?-n:this.step-n)>this.border.max?this.border.max:e},t.prototype.calcModelValue=function(t){if(t<=0)return this.border.min;if(t>=100)return this.border.max;var e=p.fromPercentWithDiff(t,this.border.min,this.border.max);return this.normalizeByStep(e)},t.prototype.isOrderNormalizeRequired=function(){return this.getCurrent().max<this.getCurrent().min},t.prototype.isSameCurrent=function(t){return t===this.getCurrent().min||t===this.getCurrent().max},t.prototype.willCurrentCollapse=function(t,e){var n=this.getCurrent();return t===b.min&&e>n.max||t===b.max&&e<n.min},t.prototype.toggleRange=function(){this.isRange=!this.isRange},t.prototype.toggleTooltip=function(){this.withTooltip=!this.withTooltip},t.prototype.toggleOrientation=function(){this.isVertical=!this.isVertical},t.prototype.toggleScale=function(){this.withScale=!this.withScale},t}(),B=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),T=function(t){function e(e){var n=t.call(this)||this;return e&&(n.copyBool(e),void 0!==e.border&&n.setValidBorders(e.border.min||n.border.min,e.border.max||n.border.max),void 0!==e.current&&(void 0!==e.current.min&&n.setValidCurrent(e.current.min,b.min),void 0!==e.current.max&&n.setValidCurrent(e.current.max||n.current.max,b.max)),void 0!==e.step&&n.setValidStep(e.step)),n}return B(e,t),e.prototype.setValidCurrent=function(t,n){e.isValidType(t);var i=Number(t);this.isInBorderRange(i),n===b.min?(this.isRangeActive(),e.isPositiveRange(i,this.getCurrent().max)):e.isPositiveRange(this.getCurrent().min,i),this.isDivideToStepOrBorder(i),this.current[n]=i},e.prototype.setValidCurrents=function(t,n){this.isRangeActive(),e.isValidType(t),e.isValidType(n);var i=Number(t),o=Number(n);this.isInBorderRange(i),this.isInBorderRange(o),e.isPositiveRange(i,o),this.isDivideToStepOrBorder(i),this.isDivideToStepOrBorder(o),this.current={min:i,max:o}},e.prototype.setValidStep=function(t){e.isValidType(t);var n=Number(t);this.isValidStep(n),this.step=n},e.prototype.setValidBorder=function(t,n){e.isValidType(t);var i=Number(t);this.isValidBorder(i,n),this.border[n]=i},e.prototype.setValidBorders=function(t,n){e.isValidType(t),e.isValidType(n);var i=Number(t),o=Number(n);e.isValidBorders(i,o),this.border={min:i,max:o}},e.isValidType=function(t){if(null==t||""===t||Number.isNaN(Number(t)))throw new _.a("Number required")},e.isPositiveRange=function(t,e){if(e<t)throw new _.a("Negative range")},e.prototype.isInBorderRange=function(t){if(t<this.border.min||t>this.border.max)throw new _.a("Not in range")},e.prototype.isRangeActive=function(){if(!this.isRange)throw new _.a("Setting ranged value for not ranged slider")},e.prototype.isValidStep=function(t){if(t<=0)throw new _.a("Too small step size");if(t>this.border.max-this.border.min)throw new _.a("Too big step size")},e.prototype.isDivideToStepOrBorder=function(t){if((t-this.border.min)%this.step!=0&&t!==this.border.min&&t!==this.border.max)throw new _.a("Not divide on step")},e.prototype.isValidBorder=function(t,e){if(e===b.min){if(t>this.border.max)throw new _.a("Negative slider body size");if(t===this.border.max)throw new _.a("Slider with only one value")}else{if(t<this.border.min)throw new _.a("Negative slider body size");if(t===this.border.min)throw new _.a("Slider with only one value")}},e.isValidBorders=function(t,e){if(t>e)throw new _.a("Negative slider body size");if(t===e)throw new _.a("Slider with only one value")},e}(E),L=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),j=function(t){function e(e){return t.call(this,new T(e),new S)||this}return L(e,t),e}(V);e.default=j},"Dw+h":function(t,e,n){"use strict";n.r(e),function(t){var e=n("Cauo");t.fn.slider=function(t){var n=[],i=this;return this.each((function(i,o){var r=new e.default(t);n.push(r),r.init(o)})),{addSlideListener:function(t){n.forEach((function(e){return e.addSlideListener(t)}))},setCurrentRange:function(t,e){n.forEach((function(n){return n.setCurrentRange(t,e)}))},setBorderMax:function(t){n.forEach((function(e){return e.setBorderMax(t)}))},setBorderMin:function(t){n.forEach((function(e){return e.setBorderMin(t)}))},setBorders:function(t,e){n.forEach((function(n){return n.setBorders(t,e)}))},setCurrent:function(t){n.forEach((function(e){return e.setCurrent(t)}))},setCurrentRangeMax:function(t){n.forEach((function(e){return e.setCurrentRangeMax(t)}))},setCurrentRangeMin:function(t){n.forEach((function(e){return e.setCurrentRangeMin(t)}))},setStep:function(t){n.forEach((function(e){return e.setStep(t)}))},toggleOrientation:function(){n.forEach((function(t){return t.toggleOrientation()}))},toggleRange:function(){n.forEach((function(t){return t.toggleRange()}))},toggleScale:function(){n.forEach((function(t){return t.toggleScale()}))},toggleTooltip:function(){n.forEach((function(t){return t.toggleTooltip()}))},getOptions:function(){return n.map((function(t){return t.getOptions()}))},getSlider:function(t){return n[t]},getElementsQuery:function(){return i},size:function(){return n.length}}}}.call(this,n("EVdn"))},gRbE:function(t,e,n){},"ll6+":function(t,e,n){"use strict";n.r(e),function(t){n("3fd2"),n("gRbE"),n("97wa"),n("xe9d");var e=n("te0p");n("Dw+h");t(".js-demo__container").each((function(n,i){new e.default(t(i).find(".js-demo__slider").slider({current:{max:90},isRange:0!==n,withScale:0!==n,isVertical:2===n})).init(i.firstElementChild)}))}.call(this,n("EVdn"))},lrbR:function(t,e,n){"use strict";var i,o=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="SliderError",e}return o(e,t),e}(Error);e.a=r},te0p:function(t,e,n){"use strict";n.r(e);n("Dw+h");var i=n("lrbR"),o=function(){function t(t){var e=this;this.changeableInputs={},this.handleSliderSlide=function(t){e.changeableInputs[t.position].value=t.value.toString()},this.makeWrappedListener=function(t){return function(e){try{t(e),e.target.setCustomValidity("")}catch(t){if(t instanceof i.a)throw t;e.target.setCustomValidity(t.message),e.target.reportValidity()}}},this.handleScaleListener=function(){e.sliderGroup.toggleScale()},this.handleTooltipListener=function(){e.sliderGroup.toggleTooltip()},this.handleVerticalListener=function(){e.sliderGroup.toggleOrientation()},this.handleRangeListener=function(){e.sliderGroup.toggleRange()},this.handleCurrentMinInput=function(t){e.sliderGroup.setCurrentRangeMin(t.target.value)},this.handleCurrentMaxInput=function(t){e.sliderGroup.setCurrentRangeMax(t.target.value)},this.handleStepInput=function(t){e.sliderGroup.setStep(t.target.value)},this.handleMaxInput=function(t){e.sliderGroup.setBorderMax(t.target.value)},this.handleMinInput=function(t){e.sliderGroup.setBorderMin(t.target.value)},this.sliderGroup=t}return t.prototype.init=function(t){var e=this,n=this.sliderGroup.getOptions()[0];t.querySelectorAll("input").forEach((function(t){e.prepareElement(n,t)})),this.sliderGroup.addSlideListener(this.handleSliderSlide)},t.prototype.prepareElement=function(t,e){var n=e,i=this.mapData(t,e.name);"checkbox"===e.type?n.checked=i.value:n.value=i.value.toString(),"currentMin"===e.name&&(this.changeableInputs.min=e),"currentMax"===e.name&&(this.changeableInputs.max=e),e.addEventListener("input",this.makeWrappedListener(i.listener))},t.prototype.mapData=function(t,e){switch(e){case"min":return{value:t.border.min,listener:this.handleMinInput};case"max":return{value:t.border.max,listener:this.handleMaxInput};case"step":return{value:t.step,listener:this.handleStepInput};case"currentMax":return{value:t.current.max,listener:this.handleCurrentMaxInput};case"currentMin":return{value:t.current.min,listener:this.handleCurrentMinInput};case"isRange":return{value:t.isRange,listener:this.handleRangeListener};case"isVertical":return{value:t.isVertical,listener:this.handleVerticalListener};case"withTooltip":return{value:t.withTooltip,listener:this.handleTooltipListener};case"withScale":return{value:t.withScale,listener:this.handleScaleListener};default:throw Error("unknown input")}},t}();e.default=o},xe9d:function(t,e,n){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,