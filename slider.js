!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s="Cauo")}({Cauo:function(t,e,i){"use strict";i.r(e);var n,o=function(){function t(){this.events=new Map}return t.prototype.subscribe=function(t,e){return this.events.has(t)||this.events.set(t,[]),this.events.get(t).push(e),this},t.prototype.notify=function(t,e){this.events.has(t)&&this.events.get(t).forEach((function(t){t(e)}))},t}();!function(t){t[t.sliderClick=0]="sliderClick",t[t.pointMove=1]="pointMove",t[t.pointGrab=2]="pointGrab",t[t.valueChanged=3]="valueChanged"}(n||(n={}));var r,s=n;!function(t){t[t.point=0]="point",t[t.scale=1]="scale",t[t.tooltip=2]="tooltip",t[t.range=3]="range",t[t.body=4]="body",t[t.line=5]="line"}(r||(r={}));var l,a,u=r,c=function(){function t(){}return t.initClass=function(e,i,n){var o=t.getFullName(n);e.classList.add(o,o+(i?"_vertical":"_horizontal"))},t.toggleOrientation=function(e,i){var n=t.getFullName(i);e.classList.toggle(n+"_vertical"),e.classList.toggle(n+"_horizontal")},t.toggleHidden=function(e,i){e.classList.toggle(t.getFullName(i)+"_hidden")},t.toggleGrab=function(e,i){e.classList.toggle(t.getFullName(i)+"_grabbed")},t.getFullName=function(e){return void 0!==e?t.MAIN_PREFIX+"__"+u[e]:t.MAIN_PREFIX},t.MAIN_PREFIX="slider",t}(),p=function(){function t(){}return t.toPercent=function(t,e){return t/e*100},t.fromPercent=function(t,e){return e*(t/100)},t.toPercentWithDiff=function(e,i,n){return t.toPercent(e-i,n-i)},t.fromPercentWithDiff=function(e,i,n){return t.fromPercent(e,n-i)+i},t}(),h=function(){function t(){}return t.calcEventPoint=function(e,i){return e===i.target?{x:p.toPercent(i.offsetX,i.target.offsetWidth),y:p.toPercent(i.offsetY,i.target.offsetHeight)}:t.calcPointByParent(e,{x:i.clientX,y:i.clientY})},t.calcPointByParent=function(t,e){var i=e.x,n=e.y,o=t.getBoundingClientRect(),r=o.left,s=o.top,l=o.width,a=o.height;return{x:p.toPercent(i-r,l),y:p.toPercent(n-s,a)}},t}(),d=(l=function(t,e){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),m=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.handleScaleClick=function(t){e.notify(s.sliderClick,h.calcEventPoint(e.element,t))},e}return d(e,t),e.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.scale),this.element.addEventListener("click",this.handleScaleClick),this.element},e.prototype.getElement=function(){return this.element},e.prototype.toggleHidden=function(){c.toggleHidden(this.element,u.scale)},e.prototype.toggleOrientation=function(){c.toggleOrientation(this.element,u.scale),this.element.childNodes.forEach((function(t){c.toggleOrientation(t,u.line)}))},e.prototype.updateLines=function(t,i,n){this.element.innerHTML="";var o=Math.floor(i/t)-Number(i%t==0);if(o>0){for(var r=e.calcGapAndCount(o,this.element[n?"offsetHeight":"offsetWidth"],t,i),s=r.percentGap,l=r.visibleCount,a=document.createDocumentFragment(),u=0;u<l;u+=1)a.append(e.buildLineHtml(n,u+1,s));this.element.append(a)}},e.buildLineHtml=function(t,e,i){var n=document.createElement("div");return n.style[t?"bottom":"left"]=i*e+"%",c.initClass(n,t,u.line),n},e.calcGapAndCount=function(t,e,i,n){for(var o=t,r=e*(i/n);r<=4;)r*=2,o/=2;return{percentGap:p.toPercent(r,e),visibleCount:Math.floor(o)}},e}(o),f=function(){function t(){}return t.prototype.getElement=function(){return this.element},t.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.tooltip),this.element},t.prototype.toggleHidden=function(){c.toggleHidden(this.element,u.tooltip)},t.prototype.update=function(t,e){if(this.element.innerText=t.toString(),!e){this.element.style.left="",this.element.style.right="";var i=this.element.getBoundingClientRect();i.left<0&&(this.element.style.left="0"),i.right>document.documentElement.offsetWidth&&(this.element.style.right="0")}},t.prototype.toggleOrientation=function(){c.toggleOrientation(this.element,u.tooltip)},t}(),g=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),y=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.tooltip=new f,e.handlePointMouseDown=function(){document.documentElement.classList.add("slider-plugin"),c.toggleGrab(e.element,u.point),e.notify(s.pointGrab,{isGrabbed:!0}),document.addEventListener("mouseup",e.handleMouseUp),document.addEventListener("mousemove",e.handleMouseMove)},e.handleMouseUp=function(){document.documentElement.classList.remove("slider-plugin"),c.toggleGrab(e.element,u.point),document.removeEventListener("mouseup",e.handleMouseUp),document.removeEventListener("mousemove",e.handleMouseMove)},e.handleMouseMove=function(t){e.notify(s.pointMove,{x:t.clientX,y:t.clientY})},e}return g(e,t),e.prototype.getElement=function(){return this.element},e.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.point),this.element.addEventListener("mousedown",this.handlePointMouseDown),this.element.append(this.tooltip.buildHtml(t)),this.element},e.prototype.updatePosition=function(t,e){var i=this.element.offsetHeight/2;this.element.style[t?"bottom":"left"]="calc("+e.percent+"% - "+i+"px)",void 0!==e.tooltip&&this.tooltip.update(e.tooltip,t)},e.prototype.toggleHidden=function(){c.toggleHidden(this.element,u.point)},e.prototype.toggleTooltip=function(){this.tooltip.toggleHidden()},e.prototype.toggleOrientation=function(){this.element.removeAttribute("style"),c.toggleOrientation(this.element,u.point),this.tooltip.toggleOrientation()},e}(o),v=function(){function t(){}return t.prototype.getElement=function(){return this.element},t.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.range),this.element},t.prototype.updatePosition=function(t,e,i){if(t){var n=i/100;void 0!==e.min&&(this.element.style.marginBottom=n*e.min+"px"),void 0!==e.max&&(this.element.style.marginTop=n*(100-e.max)+"px")}else void 0!==e.min&&(this.element.style.marginLeft=e.min+"%"),void 0!==e.max&&(this.element.style.marginRight=100-e.max+"%")},t.prototype.toggleOrientation=function(){this.element.removeAttribute("style")},t}();!function(t){t.min="min",t.max="max"}(a||(a={}));var b=a,P=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),w=function(){return(w=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},x=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.range=new v,e.points={min:new y,max:new y},e.handleMinPointMove=function(t){e.handlePointMove(t)},e.handleMaxPointMove=function(t){e.handlePointMove(t,b.max)},e.handleSliderBodyClick=function(t){e.notify(s.sliderClick,h.calcEventPoint(e.element,t))},e.handlePointMove=function(t,i){void 0===i&&(i=b.min),e.notify(s.pointMove,w(w({},h.calcPointByParent(e.element,t)),{position:i}))},e}return P(e,t),e.prototype.getElement=function(){return this.element},e.prototype.buildHtml=function(t){return this.element=document.createElement("div"),c.initClass(this.element,t,u.body),this.element.addEventListener("click",this.handleSliderBodyClick),this.element.append(this.points.min.buildHtml(t),this.points.max.buildHtml(t),this.range.buildHtml(t)),this.points.min.subscribe(s.pointMove,this.handleMinPointMove),this.points.max.subscribe(s.pointMove,this.handleMaxPointMove),this.element},e.prototype.toggleRange=function(){this.points.min.toggleHidden()},e.prototype.toggleTooltip=function(){this.points.min.toggleTooltip(),this.points.max.toggleTooltip()},e.prototype.toggleOrientation=function(){c.toggleOrientation(this.element,u.body),this.points.min.toggleOrientation(),this.points.max.toggleOrientation(),this.range.toggleOrientation()},e.prototype.updatePosition=function(t,e){var i=e.min,n=e.max,o={};void 0!==i&&(this.points.min.updatePosition(t,i),o.min=i.percent),void 0!==n&&(this.points.max.updatePosition(t,n),o.max=n.percent),this.range.updatePosition(t,o,t?this.element.offsetHeight:void 0)},e}(o),_=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),C=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.body=new x,e.scale=new m,e.handlePointMove=function(t){e.notify(s.pointMove,t)},e.handleScaleClick=function(t){e.notify(s.sliderClick,t)},e.handleBodyClick=function(t){e.notify(s.sliderClick,t)},e}return _(e,t),e.prototype.render=function(t,e,i,n,o){var r=e.isVertical,l=e.isRange,a=e.withTooltip,u=e.withScale;this.element=t;var p=document.createDocumentFragment();c.initClass(this.element,r),p.append(this.body.buildHtml(r),this.scale.buildHtml(r)),this.body.subscribe(s.sliderClick,this.handleBodyClick).subscribe(s.pointMove,this.handlePointMove),this.scale.subscribe(s.sliderClick,this.handleScaleClick),a||this.body.toggleTooltip(),t.append(p),this.updatePosition(r,i),l||this.body.toggleRange(),u?this.scale.updateLines(n,o,r):this.scale.toggleHidden()},e.prototype.toggleRange=function(){this.body.toggleRange()},e.prototype.toggleTooltip=function(){this.body.toggleTooltip()},e.prototype.toggleScale=function(){this.scale.toggleHidden()},e.prototype.toggleOrientation=function(){c.toggleOrientation(this.element),this.body.toggleOrientation(),this.scale.toggleOrientation()},e.prototype.updateScaleLines=function(t,e,i){this.scale.updateLines(t,e,i)},e.prototype.updatePosition=function(t,e){this.body.updatePosition(t,e)},e}(o),O=(i("xe9d"),i("lrbR")),S=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),M=function(t){function e(e,i){var n=t.call(this)||this;return n.handleSliderClick=function(t){var e=t.x,i=t.y,o=n.model.calcModelValue(n.model.isVertical?100-i:e);n.model.isSameCurrent(o)||n.updatePosition(o,n.model.selectPosition(o))},n.handlePointMove=function(t){var e=t.x,i=t.y,o=t.position;n.updatePosition(n.model.calcModelValue(n.model.isVertical?100-i:e),o)},n.model=e,n.view=i,n}return S(e,t),e.prototype.init=function(t){if(void 0===t)throw new O.a("Parent element undefined");this.view.render(t,this.model.getBoolOptions(),this.model.getCurrentPoints(),this.model.step,this.model.getRangeSize()),this.view.subscribe(s.sliderClick,this.handleSliderClick).subscribe(s.pointMove,this.handlePointMove)},e.prototype.updatePosition=function(t,e){var i,n;this.model.willCurrentCollapse(e,t)||(this.model.setCurrent(((i={})[e]=t,i)),this.view.updatePosition(this.model.isVertical,((n={})[e]=this.model.getPoint(e),n)),this.notify(s.valueChanged,{value:t,position:e}))},e}(o),V=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),R=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return V(e,t),e.prototype.getOptions=function(){return this.model.getOptions()},e.prototype.addSlideListener=function(t){this.subscribe(s.valueChanged,t)},e.prototype.setCurrentRange=function(t,e){this.model.setValidCurrents(t,e),this.view.updatePosition(this.model.isVertical,this.model.getCurrentPoints())},e.prototype.setCurrentRangeMin=function(t){this.model.setValidCurrent(t,b.min),this.view.updatePosition(this.model.isVertical,{min:this.model.getPoint(b.min)})},e.prototype.setCurrentRangeMax=function(t){this.model.setValidCurrent(t,b.max),this.view.updatePosition(this.model.isVertical,{max:this.model.getPoint(b.max)})},e.prototype.setCurrent=function(t){this.setCurrentRangeMax(t)},e.prototype.setStep=function(t){this.model.setValidStep(t),this.model.withScale&&this.view.updateScaleLines(this.model.step,this.model.getRangeSize(),this.model.isVertical),this.updatePointByStep(b.max),this.model.isRange&&this.updatePointByStep(b.min)},e.prototype.setBorderMin=function(t){var e=this;this.model.setValidBorder(t,b.min),this.normalizePoints(this.model.border.min,(function(t){return t<e.model.border.min})),this.updateScaleLines()},e.prototype.setBorderMax=function(t){var e=this;this.model.setValidBorder(t,b.max),this.normalizePoints(this.model.border.max,(function(t){return t>e.model.border.max})),this.updateScaleLines()},e.prototype.setBorders=function(t,e){var i=this;this.model.setValidBorders(t,e),this.normalizePoints(this.model.border.min,(function(t){return t<i.model.border.min})),this.normalizePoints(this.model.border.max,(function(t){return t>i.model.border.max}))},e.prototype.toggleRange=function(){this.model.toggleRange(),this.view.toggleRange(),this.model.isOrderNormalizeRequired()&&(this.model.normalizeCurrentOrder(),this.view.updatePosition(this.model.isVertical,{max:this.model.getPoint(b.max)}),this.notify(s.valueChanged,{value:this.model.getCurrent().max,position:b.max})),this.view.updatePosition(this.model.isVertical,{min:this.model.getPoint(b.min)})},e.prototype.toggleScale=function(){this.model.toggleScale(),this.view.toggleScale(),this.model.withScale&&this.updateScaleLines()},e.prototype.toggleTooltip=function(){this.model.toggleTooltip(),this.view.toggleTooltip()},e.prototype.toggleOrientation=function(){this.model.toggleOrientation(),this.view.toggleOrientation(),this.view.updatePosition(this.model.isVertical,this.model.getCurrentPoints()),this.model.withScale&&this.view.updateScaleLines(this.model.step,this.model.getRangeSize(),this.model.isVertical)},e.prototype.updatePointByStep=function(t){var e=this.model.getCurrent()[t],i=this.model.normalizeByStep(e);i!==e&&this.updatePosition(i,t)},e.prototype.normalizePoints=function(t,e){var i=this.model.getRealCurrent();e(i.min)&&(this.model.setCurrent({min:t}),this.notify(s.valueChanged,{value:t,position:b.min})),e(i.max)&&(this.model.setCurrent({max:t}),this.notify(s.valueChanged,{value:t,position:b.max})),this.view.updatePosition(this.model.isVertical,this.model.getCurrentPoints())},e.prototype.updateScaleLines=function(){this.model.withScale&&this.view.updateScaleLines(this.model.step,this.model.getRangeSize(),this.model.isVertical)},e}(M),B=function(){function t(e){this.current={min:0,max:80},this.border={min:0,max:100},this.step=1,this.isRange=!0,this.isVertical=!1,this.withTooltip=!0,this.withScale=!0,void 0!==e&&(void 0!==e.border&&t.copyMinMax(this.border,e.border),void 0!==e.current&&t.copyMinMax(this.current,e.current),void 0!==e.step&&(this.step=e.step),this.copyBool(e))}return t.prototype.copyBool=function(t){var e=t.isVertical,i=t.isRange,n=t.withScale,o=t.withTooltip;void 0!==i&&(this.isRange=i),void 0!==e&&(this.isVertical=e),void 0!==o&&(this.withTooltip=o),void 0!==n&&(this.withScale=n)},t.copyMinMax=function(t,e){var i=e.min,n=e.max;void 0!==n&&(t.max=n),void 0!==i&&(t.min=i)},t.prototype.setCurrent=function(e){t.copyMinMax(this.current,e)},t.prototype.getCurrent=function(){return this.isRange?this.current:{max:this.current.max,min:this.border.min}},t.prototype.getRealCurrent=function(){return this.current},t.prototype.getPoint=function(t){return{percent:p.toPercentWithDiff(this.getCurrent()[t],this.border.min,this.border.max),tooltip:this.getCurrent()[t]}},t.prototype.getCurrentPoints=function(){return{min:this.getPoint(b.min),max:this.getPoint(b.max)}},t.prototype.getOptions=function(){return{current:this.getCurrent(),border:this.border,step:this.step,isVertical:this.isVertical,isRange:this.isRange,withScale:this.withScale,withTooltip:this.withTooltip}},t.prototype.getBoolOptions=function(){return{isVertical:this.isVertical,isRange:this.isRange,withScale:this.withScale,withTooltip:this.withTooltip}},t.prototype.getRangeSize=function(){return this.border.max-this.border.min},t.prototype.selectPosition=function(t){return this.isRange?t<=this.current.min?b.min:t>=this.current.max?b.max:t<this.current.min+(this.current.max-this.current.min)/2?b.min:b.max:b.max},t.prototype.normalizeCurrentOrder=function(){var t=this.current.min;this.current.min=this.current.max,this.current.max=t},t.prototype.normalizeByStep=function(t){var e=t,i=(t-this.border.min)%this.step;return 0===i?t:(e+=this.step/2>i?-i:this.step-i)>this.border.max?this.border.max:e},t.prototype.calcModelValue=function(t){if(t<=0)return this.border.min;if(t>=100)return this.border.max;var e=p.fromPercentWithDiff(t,this.border.min,this.border.max);return this.normalizeByStep(e)},t.prototype.isOrderNormalizeRequired=function(){return this.getCurrent().max<this.getCurrent().min},t.prototype.isSameCurrent=function(t){return t===this.getCurrent().min||t===this.getCurrent().max},t.prototype.willCurrentCollapse=function(t,e){var i=this.getCurrent();return t===b.min&&e>i.max||t===b.max&&e<i.min},t.prototype.toggleRange=function(){this.isRange=!this.isRange},t.prototype.toggleTooltip=function(){this.withTooltip=!this.withTooltip},t.prototype.toggleOrientation=function(){this.isVertical=!this.isVertical},t.prototype.toggleScale=function(){this.withScale=!this.withScale},t}(),T=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),E=function(t){function e(e){var i=t.call(this)||this;return e&&(i.copyBool(e),void 0!==e.border&&i.setValidBorders(e.border.min||i.border.min,e.border.max||i.border.max),void 0!==e.current&&(void 0!==e.current.min&&i.setValidCurrent(e.current.min,b.min),void 0!==e.current.max&&i.setValidCurrent(e.current.max||i.current.max,b.max)),void 0!==e.step&&i.setValidStep(e.step)),i}return T(e,t),e.prototype.setValidCurrent=function(t,i){e.isValidType(t);var n=Number(t);this.isInBorderRange(n),i===b.min?(this.isRangeActive(),e.isPositiveRange(n,this.getCurrent().max)):e.isPositiveRange(this.getCurrent().min,n),this.isDivideToStepOrBorder(n),this.current[i]=n},e.prototype.setValidCurrents=function(t,i){this.isRangeActive(),e.isValidType(t),e.isValidType(i);var n=Number(t),o=Number(i);this.isInBorderRange(n),this.isInBorderRange(o),e.isPositiveRange(n,o),this.isDivideToStepOrBorder(n),this.isDivideToStepOrBorder(o),this.current={min:n,max:o}},e.prototype.setValidStep=function(t){e.isValidType(t);var i=Number(t);this.isValidStep(i),this.step=i},e.prototype.setValidBorder=function(t,i){e.isValidType(t);var n=Number(t);this.isValidBorder(n,i),this.border[i]=n},e.prototype.setValidBorders=function(t,i){e.isValidType(t),e.isValidType(i);var n=Number(t),o=Number(i);e.isValidBorders(n,o),this.border={min:n,max:o}},e.isValidType=function(t){if(null==t||""===t||Number.isNaN(Number(t)))throw new O.a("Number required")},e.isPositiveRange=function(t,e){if(e<t)throw new O.a("Negative range")},e.prototype.isInBorderRange=function(t){if(t<this.border.min||t>this.border.max)throw new O.a("Not in range")},e.prototype.isRangeActive=function(){if(!this.isRange)throw new O.a("Setting ranged value for not ranged slider")},e.prototype.isValidStep=function(t){if(t<=0)throw new O.a("Too small step size");if(t>this.border.max-this.border.min)throw new O.a("Too big step size")},e.prototype.isDivideToStepOrBorder=function(t){if((t-this.border.min)%this.step!=0&&t!==this.border.min&&t!==this.border.max)throw new O.a("Not divide on step")},e.prototype.isValidBorder=function(t,e){if(e===b.min){if(t>this.border.max)throw new O.a("Negative slider body size");if(t===this.border.max)throw new O.a("Slider with only one value")}else{if(t<this.border.min)throw new O.a("Negative slider body size");if(t===this.border.min)throw new O.a("Slider with only one value")}},e.isValidBorders=function(t,e){if(t>e)throw new O.a("Negative slider body size");if(t===e)throw new O.a("Slider with only one value")},e}(B),L=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),N=function(t){function e(e){return t.call(this,new E(e),new C)||this}return L(e,t),e}(R);e.default=N},lrbR:function(t,e,i){"use strict";var n,o=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),r=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="SliderError",e}return o(e,t),e}(Error);e.a=r},xe9d:function(t,e,i){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,